---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build and Publish

on:
  push:
    branches: ["main", "develop"]
    paths: ["**"]
  workflow_dispatch:
    inputs:
      release:
        type: boolean
        description: Release
        required: false
        default: false

jobs:
  plan:
    name: Plan
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.platforms }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set Platforms
        id: platforms
        run: |
          echo 'platforms=["linux/amd64", "linux/arm64"]' >> $GITHUB_OUTPUT

      - name: Get Application Versions
        id: app-versions
        run: |
          # Use CalVer as primary versioning scheme: YYYY.MM.DD
          CALVER=$(date +'%Y.%-m.%-d')
          
          # For tagged releases, still respect semver but prefer CalVer
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_VERSION="${{ github.ref_name }}"
            # Check if tag follows CalVer pattern (YYYY.M.D or YYYY.MM.DD)
            if [[ $TAG_VERSION =~ ^v?[0-9]{4}\.[0-9]{1,2}\.[0-9]{1,2}.*$ ]]; then
              VERSION=$(echo $TAG_VERSION | sed 's/^v//')
              IS_VALID_SEMVER="false"  # Treat CalVer tags as non-semver
            elif [[ $TAG_VERSION =~ ^v?[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
              # Traditional semver tag - convert to CalVer for consistency
              VERSION=$CALVER
              IS_VALID_SEMVER="true"
              SEMVER_VERSION=$(echo $TAG_VERSION | sed 's/^v//' | cut -d'-' -f1)
            else
              VERSION=$CALVER
              IS_VALID_SEMVER="false"
            fi
          else
            # Non-tag builds always use CalVer
            VERSION=$CALVER
            IS_VALID_SEMVER="false"
          fi
          
          # Add branch suffix for non-main branches (except tags)
          if [[ "${{ github.ref_type }}" != "tag" && "${{ github.ref_name }}" != "main" ]]; then
            BRANCH_SUFFIX=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g')
            VERSION="${VERSION}-${BRANCH_SUFFIX}"
          fi
          
          echo "semantic=$VERSION" >> $GITHUB_OUTPUT
          echo "raw=$VERSION" >> $GITHUB_OUTPUT
          echo "calver=$CALVER" >> $GITHUB_OUTPUT
          echo "is-valid-semver=$IS_VALID_SEMVER" >> $GITHUB_OUTPUT
          echo "upstream=$VERSION" >> $GITHUB_OUTPUT
          
          # Set semver version if we detected one
          if [[ "$IS_VALID_SEMVER" == "true" ]]; then
            echo "semver-version=${SEMVER_VERSION:-$VERSION}" >> $GITHUB_OUTPUT
          fi
          
          echo "Generated version: $VERSION"
          echo "CalVer base: $CALVER"
          echo "Is semver: $IS_VALID_SEMVER"

      - name: Build Application Metadata
        uses: docker/metadata-action@v5
        id: meta
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        with:
          flavor: latest=false
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            # CalVer-based tagging (primary scheme)
            type=raw,value=${{ steps.app-versions.outputs.calver }},enable=${{ github.ref_name == 'main' }}
            type=raw,value=${{ steps.app-versions.outputs.raw }}
            # Semver compatibility (if detected from tags)
            type=semver,pattern={{version}},value=${{ steps.app-versions.outputs.semver-version }},enable=${{ steps.app-versions.outputs.is-valid-semver }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.app-versions.outputs.semver-version }},enable=${{ steps.app-versions.outputs.is-valid-semver }}
            # Special tags
            type=raw,value=rolling
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=develop,enable=${{ github.ref_name == 'develop' }}
          labels: |
            org.opencontainers.image.title=homelab-assistant
            org.opencontainers.image.description=Kubernetes operator for homelab automation
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.app-versions.outputs.raw }}
            org.opencontainers.image.created={{date 'iso8601'}}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Upload Bake Metadata
        uses: actions/upload-artifact@v4
        with:
          name: bake-metadata
          path: ${{ steps.meta.outputs.bake-file }}
          if-no-files-found: error
          retention-days: 1

  build:
    name: Build (${{ matrix.platform }})
    needs: ["plan"]
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.plan.outputs.platforms) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Get Target Architecture
        uses: actions/github-script@v7
        id: target
        with:
          script: |
            core.setOutput('arch', '${{ matrix.platform }}'.split('/').pop());

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Download Bake Metadata
        uses: actions/download-artifact@v4
        with:
          name: bake-metadata
          path: ${{ runner.temp }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Application
        uses: docker/bake-action@v5
        id: bake
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ runner.temp }}/docker-metadata-action-bake.json
          set: |
            *.args.VENDOR=${{ github.repository_owner }}
            *.cache-from=${{ format('type=registry,ref=ghcr.io/{0}/build_cache:homelab-assistant-{1},mode=max', github.repository_owner, steps.target.outputs.arch) }}
            *.cache-to=${{ (github.event_name == 'push' || inputs.release) && format('type=registry,ref=ghcr.io/{0}/build_cache:homelab-assistant-{1},mode=max,compression=zstd,force-compression=true', github.repository_owner, steps.target.outputs.arch) || '' }}
            *.labels.org.opencontainers.image.title=homelab-assistant
            *.labels.org.opencontainers.image.url=https://ghcr.io/${{ github.repository }}
            *.labels.org.opencontainers.image.revision=${{ github.sha }}
            *.labels.org.opencontainers.image.vendor=${{ github.repository_owner }}
            ${{ (github.event_name == 'push' || inputs.release) && format('*.output=type=image,name=ghcr.io/{0},push-by-digest=true,name-canonical=true,push=true', github.repository) || '*.output=type=docker,name=homelab-assistant:test' }}
            *.platform=${{ matrix.platform }}
            *.tags=
          source: .
          targets: image
          workdir: .

      - name: Run Application Tests
        if: ${{ ! (github.event_name == 'push' || inputs.release) }}
        uses: ./.github/workflows/test-image.yml
        with:
          image: homelab-assistant:test

      - if: ${{ github.event_name == 'push' || inputs.release }}
        name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ fromJSON(steps.bake.outputs.metadata).image['containerimage.digest'] }}"
          touch "/tmp/digests/${digest#sha256:}"

      - if: ${{ github.event_name == 'push' || inputs.release }}
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    if: ${{ github.event_name == 'push' || inputs.release }}
    name: Merge
    runs-on: ubuntu-latest
    needs: ["plan", "build"]
    steps:
      - name: Download metadata
        uses: actions/download-artifact@v4
        with:
          name: bake-metadata
          path: /tmp

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' < /tmp/docker-metadata-action-bake.json) \
            $(printf 'ghcr.io/${{ github.repository }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.repository }}:rolling

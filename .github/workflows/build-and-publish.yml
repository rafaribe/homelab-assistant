---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build and Publish

on:
  push:
    branches: ["main", "develop"]
    tags: ["v*"]
    paths-ignore:
      - "**.md"
      - "docs/**"
  pull_request:
    branches: ["main", "develop"]
    paths-ignore:
      - "**.md"
      - "docs/**"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release:
        type: boolean
        description: Release
        required: false
        default: false
      platforms:
        type: choice
        description: Platforms to build
        required: false
        default: "all"
        options:
          - "all"
          - "linux/amd64"
          - "linux/arm64"

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

jobs:
  plan:
    name: Plan
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.platforms }}
      should-push: ${{ steps.push-decision.outputs.should-push }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set Platforms
        id: platforms
        run: |
          if [[ "${{ inputs.platforms }}" == "linux/amd64" ]]; then
            echo 'platforms=["linux/amd64"]' >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.platforms }}" == "linux/arm64" ]]; then
            echo 'platforms=["linux/arm64"]' >> $GITHUB_OUTPUT
          else
            echo 'platforms=["linux/amd64", "linux/arm64"]' >> $GITHUB_OUTPUT
          fi

      - name: Decide if we should push
        id: push-decision
        run: |
          # Push on: main/develop branch pushes, tags, releases, or manual release
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "develop") ]] || \
             [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]] || \
             [[ "${{ github.event_name }}" == "release" ]] || \
             [[ "${{ inputs.release }}" == "true" ]]; then
            echo "should-push=true" >> $GITHUB_OUTPUT
            echo "Will push images to registry"
          else
            echo "should-push=false" >> $GITHUB_OUTPUT
            echo "Will only build images (PR or non-main branch)"
          fi

      - name: Generate Application Versions
        id: app-versions
        run: |
          # Generate CalVer version (YYYY.MM.DD)
          CALVER=$(date +'%Y.%m.%d')
          echo "calver=$CALVER" >> $GITHUB_OUTPUT
          
          # Generate raw version with commit info
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            RAW_VERSION="${{ github.ref_name }}"
          else
            RAW_VERSION="${CALVER}-${{ github.sha }}"
          fi
          echo "raw=$RAW_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a valid semver tag
          if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "is-valid-semver=true" >> $GITHUB_OUTPUT
            echo "semver-version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "is-valid-semver=false" >> $GITHUB_OUTPUT
            echo "semver-version=" >> $GITHUB_OUTPUT
          fi

      - name: Build Application Metadata
        uses: docker/metadata-action@v5
        id: meta
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        with:
          flavor: latest=false
          images: |
            ghcr.io/${{ github.repository_owner }}/homelab-assistant
          tags: |
            # CalVer-based tagging (primary scheme)
            type=raw,value=${{ steps.app-versions.outputs.calver }},enable=${{ github.ref_name == 'main' }}
            type=raw,value=${{ steps.app-versions.outputs.raw }}
            # Semver compatibility (if detected from tags)
            type=semver,pattern={{version}},value=${{ steps.app-versions.outputs.semver-version }},enable=${{ steps.app-versions.outputs.is-valid-semver }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.app-versions.outputs.semver-version }},enable=${{ steps.app-versions.outputs.is-valid-semver }}
            # Special tags
            type=raw,value=rolling
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=develop,enable=${{ github.ref_name == 'develop' }}
          labels: |
            org.opencontainers.image.title=homelab-assistant
            org.opencontainers.image.description=Kubernetes controllers for homelab automation
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.app-versions.outputs.raw }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=https://ghcr.io/${{ github.repository }}
            org.opencontainers.image.documentation=https://rafaribe.github.io/homelab-assistant/
            org.opencontainers.image.licenses=Apache-2.0

      - name: Upload metadata
        uses: actions/upload-artifact@v4
        with:
          name: bake-metadata
          path: ${{ steps.meta.outputs.bake-file }}
          retention-days: 1

  build:
    name: Build (${{ matrix.platform }})
    needs: ["plan"]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(needs.plan.outputs.platforms) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download metadata
        uses: actions/download-artifact@v4
        with:
          name: bake-metadata
          path: /tmp

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: ${{ needs.plan.outputs.should-push == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set target architecture
        id: target
        run: |
          platform="${{ matrix.platform }}"
          echo "arch=${platform##*/}" >> $GITHUB_OUTPUT

      - name: Build and Push Application
        uses: docker/bake-action@v5
        id: bake
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ runner.temp }}/docker-metadata-action-bake.json
          set: |
            *.args.VENDOR=${{ github.repository_owner }}
            *.cache-from=${{ format('type=registry,ref=ghcr.io/{0}/build_cache:homelab-assistant-{1},mode=max', github.repository_owner, steps.target.outputs.arch) }}
            *.cache-to=${{ format('type=registry,ref=ghcr.io/{0}/build_cache:homelab-assistant-{1},mode=max,compression=zstd,force-compression=true', github.repository_owner, steps.target.outputs.arch) }}
            *.labels.org.opencontainers.image.title=homelab-assistant
            *.labels.org.opencontainers.image.url=https://ghcr.io/${{ github.repository }}
            *.labels.org.opencontainers.image.revision=${{ github.sha }}
            *.labels.org.opencontainers.image.vendor=${{ github.repository_owner }}
            *.output=${{ needs.plan.outputs.should-push == 'true' && format('type=image,name=ghcr.io/{0}/homelab-assistant,push-by-digest=true,name-canonical=true,push=true', github.repository_owner) || 'type=docker,name=homelab-assistant:test' }}
            *.platform=${{ matrix.platform }}
            *.tags=
          source: .
          targets: image
          workdir: .

      - if: ${{ needs.plan.outputs.should-push == 'true' }}
        name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ fromJSON(steps.bake.outputs.metadata).image['containerimage.digest'] }}"
          touch "/tmp/digests/${digest#sha256:}"

      - if: ${{ needs.plan.outputs.should-push == 'true' }}
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.target.outputs.arch }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    if: ${{ needs.plan.outputs.should-push == 'true' }}
    name: Merge
    runs-on: ubuntu-latest
    needs: ["plan", "build"]
    steps:
      - name: Download metadata
        uses: actions/download-artifact@v4
        with:
          name: bake-metadata
          path: /tmp

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.target."docker-metadata-action".tags | map("-t " + .) | join(" ")' /tmp/docker-metadata-action-bake.json) \
            $(printf 'ghcr.io/${{ github.repository_owner }}/homelab-assistant@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.repository_owner }}/homelab-assistant:${{ github.ref_name }}

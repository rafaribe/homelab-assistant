---
name: Build and Publish

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      push:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    name: Prepare Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-valid-semver: ${{ steps.version.outputs.is-valid-semver }}
      semantic: ${{ steps.version.outputs.semantic }}
      raw: ${{ steps.version.outputs.raw }}
      should-push: ${{ steps.push.outputs.should-push }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semver
        run: npm install semver

      - name: Generate Version
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const semver = require('semver');
            
            // Get version from various sources
            let version = '';
            
            if (context.eventName === 'push' && context.ref.startsWith('refs/tags/')) {
              // Tag push - use the tag
              version = context.ref.replace('refs/tags/', '');
            } else if (context.eventName === 'push' && context.ref === 'refs/heads/main') {
              // Main branch - use CalVer
              const now = new Date();
              version = `${now.getFullYear()}.${(now.getMonth() + 1).toString().padStart(2, '0')}.${now.getDate().toString().padStart(2, '0')}`;
            } else {
              // PR or develop - use branch-based version
              const now = new Date();
              const branch = context.ref.replace('refs/heads/', '').replace(/[^a-zA-Z0-9]/g, '-');
              version = `${now.getFullYear()}.${(now.getMonth() + 1).toString().padStart(2, '0')}.${now.getDate().toString().padStart(2, '0')}-${branch}`;
            }
            
            // Strip the v prefix and pre-release info for raw version
            function sanitize(version) {
              return version.replace(/^v/, '').split('-')[0];
            }
            
            function calver() {
              const now = new Date();
              return `${now.getFullYear()}.${(now.getMonth() + 1).toString().padStart(2, '0')}.${now.getDate().toString().padStart(2, '0')}`;
            }
            
            const strictSemverRegex = /^v?(\d+(\.\d+)?(\.\d+)?)/;
            const parsedVersion = strictSemverRegex.exec(version);
            const isValidSemver = parsedVersion !== null;
            const parsedSemver = isValidSemver ? semver.coerce(parsedVersion[0], {loose: true}) : null;
            const semanticVersion = isValidSemver ? `${parsedSemver.major}.${parsedSemver.minor}.${parsedSemver.patch}` : calver();
            const rawVersion = isValidSemver ? sanitize(version) : version;
            
            core.setOutput('version', version);
            core.setOutput('is-valid-semver', isValidSemver);
            core.setOutput('semantic', semanticVersion);
            core.setOutput('raw', rawVersion);
            
            console.log(`Version: ${version}`);
            console.log(`Is valid semver: ${isValidSemver}`);
            console.log(`Semantic: ${semanticVersion}`);
            console.log(`Raw: ${rawVersion}`);

      - name: Determine Push
        id: push
        run: |
          SHOULD_PUSH="false"
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop" || "${{ github.ref }}" == refs/tags/*) ]]; then
            SHOULD_PUSH="true"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.push }}" == "true" ]]; then
            SHOULD_PUSH="true"
          fi
          echo "should-push=${SHOULD_PUSH}" >> $GITHUB_OUTPUT
          echo "Should push: ${SHOULD_PUSH}"

  build:
    name: Build (${{ matrix.platform }})
    needs: [prepare]
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install mise
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: needs.prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},value=${{ needs.prepare.outputs.semantic }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare.outputs.semantic }},enable=${{ needs.prepare.outputs.is-valid-semver }}
            type=semver,pattern={{major}},value=${{ needs.prepare.outputs.semantic }},enable=${{ needs.prepare.outputs.is-valid-semver }}
            type=raw,value=${{ needs.prepare.outputs.raw }},enable=${{ needs.prepare.outputs.is-valid-semver }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
            type=sha,prefix={{branch}}-,enable=${{ github.event_name == 'pull_request' }}
          labels: |
            org.opencontainers.image.title=homelab-assistant
            org.opencontainers.image.description=Kubernetes operator for homelab automation
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ needs.prepare.outputs.version }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ needs.prepare.outputs.should-push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha,scope=${{ github.workflow }}-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}-${{ matrix.platform }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ needs.prepare.outputs.should-push == 'true' }}

      - name: Export digest
        if: needs.prepare.outputs.should-push == 'true'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        if: needs.prepare.outputs.should-push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Create Multi-Platform Manifest
    if: needs.prepare.outputs.should-push == 'true'
    runs-on: ubuntu-latest
    needs: [prepare, build]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},value=${{ needs.prepare.outputs.semantic }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare.outputs.semantic }},enable=${{ needs.prepare.outputs.is-valid-semver }}
            type=semver,pattern={{major}},value=${{ needs.prepare.outputs.semantic }},enable=${{ needs.prepare.outputs.is-valid-semver }}
            type=raw,value=${{ needs.prepare.outputs.raw }},enable=${{ needs.prepare.outputs.is-valid-semver }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
            type=sha,prefix={{branch}}-,enable=${{ github.event_name == 'pull_request' }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  summary:
    name: Build Summary
    if: always()
    needs: [prepare, build, merge]
    runs-on: ubuntu-latest
    steps:
      - name: Create Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Semantic Version:** ${{ needs.prepare.outputs.semantic }}" >> $GITHUB_STEP_SUMMARY
          echo "**Raw Version:** ${{ needs.prepare.outputs.raw }}" >> $GITHUB_STEP_SUMMARY
          echo "**Valid Semver:** ${{ needs.prepare.outputs.is-valid-semver }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Push:** ${{ needs.prepare.outputs.should-push }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.prepare.outputs.should-push }}" == "true" ]]; then
            echo "**Registry:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Available Tags:" >> $GITHUB_STEP_SUMMARY
            echo "- \`latest\` (main branch)" >> $GITHUB_STEP_SUMMARY
            echo "- \`develop\` (develop branch)" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ needs.prepare.outputs.semantic }}\`" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.prepare.outputs.is-valid-semver }}" == "true" ]]; then
              echo "- \`${{ needs.prepare.outputs.raw }}\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Note:** Images were built but not pushed to registry" >> $GITHUB_STEP_SUMMARY
          fi

---
name: "Helm Charts"

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "charts/**"
      - ".github/workflows/helm.yaml"
  push:
    branches:
      - main
    paths:
      - "charts/**"
      - ".github/workflows/helm.yaml"

permissions:
  contents: read
  packages: write

jobs:
  chart-test:
    name: Chart Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Install helm unittest plugin
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest.git

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - name: Run helm unittest
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          for chart in charts/*/; do
            if [ -d "$chart/tests" ]; then
              echo "Running tests for $chart"
              helm unittest "$chart"
            else
              echo "No tests found for $chart, skipping"
            fi
          done

  chart-docs:
    name: Chart Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install helm-docs
        run: |
          cd /tmp
          wget https://github.com/norwoodj/helm-docs/releases/download/v1.14.2/helm-docs_1.14.2_Linux_x86_64.tar.gz
          tar -xzf helm-docs_1.14.2_Linux_x86_64.tar.gz
          sudo mv helm-docs /usr/local/bin/helm-docs
          chmod +x /usr/local/bin/helm-docs

      - name: Run helm-docs
        run: |
          cd charts
          helm-docs --chart-search-root=.
          
      - name: Check for documentation changes
        run: |
          if ! git diff --exit-code; then
            echo "Documentation is out of date. Please run 'make chart-docs' and commit the changes."
            exit 1
          fi

  chart-publish:
    name: Publish CRDs Chart
    runs-on: ubuntu-latest
    needs: [chart-test, chart-docs]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Log in to GitHub Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Publish CRDs Chart to OCI Registry
        run: |
          # Only publish the CRDs chart - main app uses bjw-s app-template
          crds_chart_dir="charts/homelab-assistant-crds"
          
          if [ -d "$crds_chart_dir" ]; then
            echo "üì¶ Processing CRDs chart..."
            
            # Get chart version
            chart_version=$(helm show chart "$crds_chart_dir" | grep '^version:' | cut -d' ' -f2)
            echo "CRDs chart version: $chart_version"
            
            # OCI chart name
            oci_ref="oci://ghcr.io/${{ github.repository_owner }}/homelab-assistant-crds"
            
            echo "üöÄ Publishing homelab-assistant-crds:${chart_version} to OCI registry..."
            
            # Package and push directly to OCI registry
            helm package "$crds_chart_dir" --destination /tmp/
            helm push "/tmp/homelab-assistant-crds-${chart_version}.tgz" "$oci_ref"
            
            echo "‚úÖ Successfully published homelab-assistant-crds:${chart_version}"
            
            # Verify the chart was published
            echo "üîç Verifying published chart..."
            helm show chart "${oci_ref}" --version "${chart_version}"
          else
            echo "‚ùå CRDs chart directory not found: $crds_chart_dir"
            exit 1
          fi

      - name: Summary
        run: |
          echo "üéâ CRDs chart published successfully to OCI registry!"
          echo ""
          echo "üìã Published chart:"
          chart_version=$(helm show chart "charts/homelab-assistant-crds" | grep '^version:' | cut -d' ' -f2)
          echo "  ‚Ä¢ ghcr.io/${{ github.repository_owner }}/homelab-assistant-crds:${chart_version}"
          echo ""
          echo "üìñ Usage with bjw-s-labs app-template v4.1.1:"
          echo "  # 1. Install CRDs first"
          echo "  helm install homelab-assistant-crds oci://ghcr.io/${{ github.repository_owner }}/homelab-assistant-crds --version ${chart_version}"
          echo ""
          echo "  # 2. Install main application using bjw-s-labs app-template v4.1.1"
          echo "  helm repo add bjw-s-labs https://bjw-s-labs.github.io/helm-charts"
          echo "  helm install homelab-assistant bjw-s-labs/app-template --version 4.1.1 -f values.yaml"
          echo ""
          echo "üí° The main application uses bjw-s-labs app-template v4.1.1 - no custom chart needed!"

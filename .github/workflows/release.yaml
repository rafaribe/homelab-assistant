---
name: "Release"

on:
  push:
    tags:
      - "v*.*.*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Run tests
        run: |
          make envtest
          KUBEBUILDER_ASSETS="$(pwd)/bin/k8s/1.28.3-linux-amd64" go test -v -coverprofile=coverage.out ./api/... ./cmd/... ./test/utils/...

      - name: Generate manifests
        run: make manifests generate

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

  sign:
    name: Sign
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign image
        run: |
          cosign sign --yes ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}

  helm-charts:
    name: Package and Publish Helm Charts
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update chart versions
        run: |
          VERSION=${{ needs.build.outputs.version }}
          # Update main chart
          sed -i "s/^version:.*/version: ${VERSION#v}/" charts/homelab-assistant/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" charts/homelab-assistant/Chart.yaml
          
          # Update CRDs chart
          sed -i "s/^version:.*/version: ${VERSION#v}/" charts/homelab-assistant-crds/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" charts/homelab-assistant-crds/Chart.yaml

      - name: Package charts
        run: |
          # Package both charts
          helm package charts/homelab-assistant --destination .
          helm package charts/homelab-assistant-crds --destination .

      - name: Push charts to GHCR
        run: |
          VERSION=${{ needs.build.outputs.version }}
          
          # Push main chart to GHCR OCI registry
          helm push homelab-assistant-${VERSION#v}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/homelab-assistant
          
          # Push CRDs chart to GHCR OCI registry
          helm push homelab-assistant-crds-${VERSION#v}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/homelab-assistant-crds

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            homelab-assistant-*.tgz
          generate_release_notes: true
          body: |
            ## Helm Charts
            
            ### Install from GHCR OCI Registry
            
            ```bash
            # Install CRDs
            helm install homelab-assistant-crds \
              oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/homelab-assistant-crds \
              --version ${{ needs.build.outputs.version }} \
              --namespace homelab-assistant-system \
              --create-namespace
            
            # Install Controllers
            helm install homelab-assistant \
              oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/homelab-assistant \
              --version ${{ needs.build.outputs.version }} \
              --namespace homelab-assistant-system
            ```
            
            ### Container Images
            
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest` (if main branch)
            
            ### Verification
            
            All container images are signed with cosign and can be verified:
            
            ```bash
            cosign verify ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}
            ```

name: Publish CRD Schemas

on:
  # Trigger on CRD changes
  push:
    branches: [ main ]
    paths:
      - 'api/**'
      - 'config/crd/**'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish even without changes'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      crd-changed: ${{ steps.changes.outputs.crd }}
      should-publish: ${{ steps.should-publish.outputs.result }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for CRD changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            crd:
              - 'api/**'
              - 'config/crd/**'
      
      - name: Determine if we should publish
        id: should-publish
        run: |
          if [[ "${{ github.event.inputs.force_publish }}" == "true" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "üîÑ Force publish requested"
          elif [[ "${{ steps.changes.outputs.crd }}" == "true" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "üìù CRD changes detected"
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è No CRD changes, skipping"
          fi

  generate-schemas:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install mise
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true
      
      - name: Generate CRDs and schemas
        run: |
          mise run manifests
          mise run generate
      
      - name: Create schema documentation
        run: |
          mkdir -p docs/schemas
          mkdir -p docs/examples
          
          # Copy generated CRDs
          cp -r config/crd/bases/* docs/schemas/ || true
          
          # Copy examples if they exist
          cp -r examples/* docs/examples/ || true
      
      - name: Generate schema index
        run: |
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Homelab Assistant - CRD Schemas</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 1200px; 
                      margin: 0 auto; 
                      padding: 20px;
                      line-height: 1.6;
                  }
                  .header { 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white; 
                      padding: 2rem; 
                      border-radius: 10px; 
                      margin-bottom: 2rem;
                      text-align: center;
                  }
                  .section { 
                      background: #f8f9fa; 
                      padding: 1.5rem; 
                      border-radius: 8px; 
                      margin-bottom: 1.5rem;
                      border-left: 4px solid #667eea;
                  }
                  .file-list { 
                      display: grid; 
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
                      gap: 1rem; 
                      margin-top: 1rem;
                  }
                  .file-item { 
                      background: white; 
                      padding: 1rem; 
                      border-radius: 6px; 
                      border: 1px solid #e9ecef;
                      transition: transform 0.2s;
                  }
                  .file-item:hover { 
                      transform: translateY(-2px); 
                      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                  }
                  .file-item a { 
                      text-decoration: none; 
                      color: #495057; 
                      font-weight: 500;
                  }
                  .file-item a:hover { 
                      color: #667eea; 
                  }
                  .badge { 
                      background: #667eea; 
                      color: white; 
                      padding: 0.25rem 0.5rem; 
                      border-radius: 4px; 
                      font-size: 0.8rem;
                      margin-left: 0.5rem;
                  }
                  .updated { 
                      color: #6c757d; 
                      font-size: 0.9rem; 
                      text-align: center; 
                      margin-top: 2rem;
                  }
                  code { 
                      background: #f1f3f4; 
                      padding: 0.2rem 0.4rem; 
                      border-radius: 3px; 
                      font-family: 'Monaco', 'Consolas', monospace;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üè† Homelab Assistant</h1>
                  <p>Kubernetes Custom Resource Definitions & Schemas</p>
              </div>
              
              <div class="section">
                  <h2>üìã Custom Resource Definitions</h2>
                  <p>OpenAPI schemas for Homelab Assistant CRDs. Use these for validation, IDE support, and documentation.</p>
                  <div class="file-list" id="crd-files">
                      <!-- CRD files will be populated by JavaScript -->
                  </div>
              </div>
              
              <div class="section">
                  <h2>üìñ Examples</h2>
                  <p>Example YAML files showing how to use the CRDs in your cluster.</p>
                  <div class="file-list" id="example-files">
                      <!-- Example files will be populated by JavaScript -->
                  </div>
              </div>
              
              <div class="section">
                  <h2>üöÄ Usage</h2>
                  <p>Install CRDs in your cluster:</p>
                  <pre><code>kubectl apply -f https://rafaribe.github.io/homelab-assistant/schemas/</code></pre>
                  
                  <p>Or install specific CRDs:</p>
                  <pre><code>kubectl apply -f https://rafaribe.github.io/homelab-assistant/schemas/homelab.rafaribe.com_volsyncmonitors.yaml</code></pre>
              </div>
              
              <div class="updated">
                  Last updated: <span id="last-updated"></span>
              </div>
              
              <script>
                  // Set last updated time
                  document.getElementById('last-updated').textContent = new Date().toLocaleString();
                  
                  // Populate file lists (this would be enhanced with actual file discovery)
                  const crdContainer = document.getElementById('crd-files');
                  const exampleContainer = document.getElementById('example-files');
                  
                  // This is a placeholder - in a real implementation, you'd scan the directories
                  const crdFiles = [
                      'homelab.rafaribe.com_volsyncmonitors.yaml',
                      'homelab.rafaribe.com_volsyncunlocks.yaml'
                  ];
                  
                  const exampleFiles = [
                      'volsync-monitor-example.yaml',
                      'flux-deployment.yaml'
                  ];
                  
                  crdFiles.forEach(file => {
                      const item = document.createElement('div');
                      item.className = 'file-item';
                      item.innerHTML = `
                          <a href="schemas/${file}">${file}</a>
                          <span class="badge">CRD</span>
                      `;
                      crdContainer.appendChild(item);
                  });
                  
                  exampleFiles.forEach(file => {
                      const item = document.createElement('div');
                      item.className = 'file-item';
                      item.innerHTML = `
                          <a href="examples/${file}">${file}</a>
                          <span class="badge">Example</span>
                      `;
                      exampleContainer.appendChild(item);
                  });
              </script>
          </body>
          </html>
          EOF
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    needs: generate-schemas
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    needs: [detect-changes, deploy]
    if: always() && needs.detect-changes.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify completion
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ CRD schemas published successfully!"
            echo "üìñ View at: https://rafaribe.github.io/homelab-assistant/"
          else
            echo "‚ùå Failed to publish CRD schemas"
            exit 1
          fi

---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Test Image

on:
  workflow_call:
    inputs:
      image:
        description: Image to test
        required: true
        type: string

jobs:
  test:
    name: Test Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test version command
        run: |
          echo "Testing version command..."
          docker run --rm ${{ inputs.image }} --version
          
      - name: Test help command
        run: |
          echo "Testing help command..."
          docker run --rm ${{ inputs.image }} --help

      - name: Test container starts without crash
        run: |
          echo "Testing container startup..."
          # Test that the container can start without immediate crash
          timeout 10s docker run --rm ${{ inputs.image }} || [ $? -eq 124 ]

      - name: Test binary exists and is executable
        run: |
          echo "Testing binary exists and is executable..."
          docker run --rm ${{ inputs.image }} sh -c "ls -la /manager && file /manager"

      - name: Test container user permissions
        run: |
          echo "Testing container runs as non-root user..."
          USER_ID=$(docker run --rm ${{ inputs.image }} sh -c "id -u")
          if [ "$USER_ID" = "0" ]; then
            echo "ERROR: Container is running as root user"
            exit 1
          fi
          echo "✅ Container runs as user ID: $USER_ID"

      - name: Test environment variables
        run: |
          echo "Testing environment variables..."
          docker run --rm ${{ inputs.image }} sh -c "env | grep -E '(PATH|HOME|USER)' || true"

      - name: Test with Kubernetes-like environment
        run: |
          echo "Testing with Kubernetes-like environment variables..."
          docker run --rm \
            -e KUBERNETES_SERVICE_HOST=kubernetes.default.svc \
            -e KUBERNETES_SERVICE_PORT=443 \
            --name test-k8s-env \
            ${{ inputs.image }} --help

      - name: Test metrics endpoint configuration
        run: |
          echo "Testing metrics endpoint configuration..."
          # Test that the binary accepts metrics configuration
          timeout 5s docker run --rm ${{ inputs.image }} \
            --metrics-bind-address=:9090 \
            --health-probe-bind-address=:9091 || [ $? -eq 124 ]

      - name: Test leader election flag
        run: |
          echo "Testing leader election flag..."
          # Test that the binary accepts leader election flag
          timeout 5s docker run --rm ${{ inputs.image }} \
            --leader-elect=true || [ $? -eq 124 ]

      - name: Test image labels and metadata
        run: |
          echo "Testing image labels and metadata..."
          docker inspect ${{ inputs.image }} | jq -r '.[0].Config.Labels' | grep -E "(org.opencontainers.image|version)" || true

      - name: Test image size
        run: |
          echo "Testing image size..."
          SIZE=$(docker inspect ${{ inputs.image }} | jq -r '.[0].Size')
          SIZE_MB=$((SIZE / 1024 / 1024))
          echo "Image size: ${SIZE_MB}MB"
          # Warn if image is larger than 100MB (adjust as needed)
          if [ $SIZE_MB -gt 100 ]; then
            echo "⚠️  Warning: Image size is ${SIZE_MB}MB, consider optimization"
          else
            echo "✅ Image size is reasonable: ${SIZE_MB}MB"
          fi

      - name: Test security scan (basic)
        run: |
          echo "Testing basic security properties..."
          # Check that we're using distroless base
          docker history ${{ inputs.image }} | grep -i distroless && echo "✅ Using distroless base image" || echo "⚠️  Not using distroless base"
          
          # Check for common security issues
          docker run --rm ${{ inputs.image }} sh -c "ls -la /etc/passwd /etc/shadow 2>/dev/null || echo 'No passwd/shadow files (good for distroless)'"

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install mise
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true

      - name: Set up kind cluster for testing
        run: |
          echo "Setting up kind cluster for integration testing..."
          mise run k8s-setup

      - name: Test image in Kubernetes environment
        run: |
          echo "Testing image in Kubernetes environment..."
          
          # Create a test deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: homelab-assistant-test
            namespace: default
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: homelab-assistant-test
            template:
              metadata:
                labels:
                  app: homelab-assistant-test
              spec:
                containers:
                - name: manager
                  image: ${{ inputs.image }}
                  command: ["/manager"]
                  args:
                    - --metrics-bind-address=:8080
                    - --health-probe-bind-address=:8081
                  ports:
                  - containerPort: 8080
                    name: metrics
                  - containerPort: 8081
                    name: health
                  resources:
                    limits:
                      memory: "128Mi"
                      cpu: "100m"
                    requests:
                      memory: "64Mi"
                      cpu: "50m"
          EOF

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          kubectl wait --for=condition=available --timeout=60s deployment/homelab-assistant-test

      - name: Test pod is running
        run: |
          echo "Testing pod is running..."
          kubectl get pods -l app=homelab-assistant-test
          POD_NAME=$(kubectl get pods -l app=homelab-assistant-test -o jsonpath='{.items[0].metadata.name}')
          kubectl describe pod $POD_NAME

      - name: Test health endpoint
        run: |
          echo "Testing health endpoint..."
          POD_NAME=$(kubectl get pods -l app=homelab-assistant-test -o jsonpath='{.items[0].metadata.name}')
          # Port forward and test health endpoint
          kubectl port-forward pod/$POD_NAME 8081:8081 &
          PF_PID=$!
          sleep 5
          
          # Test health endpoint
          curl -f http://localhost:8081/healthz || echo "Health endpoint test failed"
          curl -f http://localhost:8081/readyz || echo "Ready endpoint test failed"
          
          kill $PF_PID || true

      - name: Check pod logs
        run: |
          echo "Checking pod logs..."
          POD_NAME=$(kubectl get pods -l app=homelab-assistant-test -o jsonpath='{.items[0].metadata.name}')
          kubectl logs $POD_NAME --tail=50

      - name: Cleanup test resources
        if: always()
        run: |
          echo "Cleaning up test resources..."
          kubectl delete deployment homelab-assistant-test --ignore-not-found=true
          mise run k8s-teardown

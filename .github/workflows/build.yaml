---
name: "Build"

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "api/**"
      - "cmd/**"
      - "internal/**"
      - "config/**"
      - "charts/**"
      - "Dockerfile"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/build.yaml"
  pull_request:
    paths:
      - "api/**"
      - "cmd/**"
      - "internal/**"
      - "config/**"
      - "charts/**"
      - "Dockerfile"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/build.yaml"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

      - name: Run Go tests
        run: make test

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Install helm unittest plugin
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest.git

      - name: Run helm unittest
        run: |
          for chart in charts/*/; do
            if [ -d "$chart/tests" ]; then
              echo "Running tests for $chart"
              helm unittest "$chart"
            else
              echo "No tests found for $chart, skipping"
            fi
          done

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Run chart-testing (lint)
        run: ct lint --config .github/ct.yaml

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Run tests
        run: |
          make envtest
          KUBEBUILDER_ASSETS="$(pwd)/bin/k8s/1.28.3-linux-amd64" go test -v -coverprofile=coverage.out ./api/... ./cmd/... ./test/utils/...

      - name: Generate manifests
        run: make manifests generate

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=rolling,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  helm-charts:
    name: Package and Publish Development Charts
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for charts
        id: chart-meta
        run: |
          # Use short SHA for development versions
          SHORT_SHA=$(git rev-parse --short HEAD)
          CHART_VERSION="0.0.0-dev.${SHORT_SHA}"
          echo "version=${CHART_VERSION}" >> $GITHUB_OUTPUT
          echo "app-version=main-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Update chart versions
        run: |
          # Update main chart
          sed -i "s/^version:.*/version: ${{ steps.chart-meta.outputs.version }}/" charts/homelab-assistant/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${{ steps.chart-meta.outputs.app-version }}\"/" charts/homelab-assistant/Chart.yaml
          
          # Update CRDs chart
          sed -i "s/^version:.*/version: ${{ steps.chart-meta.outputs.version }}/" charts/homelab-assistant-crds/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${{ steps.chart-meta.outputs.app-version }}\"/" charts/homelab-assistant-crds/Chart.yaml

      - name: Package charts
        run: |
          helm package charts/homelab-assistant --destination .
          helm package charts/homelab-assistant-crds --destination .

      - name: Push development charts to GHCR
        run: |
          # Push main chart to GHCR OCI registry with dev tag
          helm push homelab-assistant-${{ steps.chart-meta.outputs.version }}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/homelab-assistant
          
          # Push CRDs chart to GHCR OCI registry with dev tag
          helm push homelab-assistant-crds-${{ steps.chart-meta.outputs.version }}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/homelab-assistant-crds

  sign:
    name: Sign
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign image
        run: |
          cosign sign --yes ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}
